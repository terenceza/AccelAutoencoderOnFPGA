-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Autoencoder_BackPropagateEncoderWeightsChanges is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    EncoderWeightChanges_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    EncoderWeightChanges_ce0 : OUT STD_LOGIC;
    EncoderWeightChanges_we0 : OUT STD_LOGIC;
    EncoderWeightChanges_d0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    TotalErrorDeltas_address0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    TotalErrorDeltas_ce0 : OUT STD_LOGIC;
    TotalErrorDeltas_we0 : OUT STD_LOGIC;
    TotalErrorDeltas_d0 : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Autoencoder_BackPropagateEncoderWeightsChanges is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";

attribute shreg_extract : string;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal add_ln282_fu_129_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln282_reg_203 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal zext_ln285_fu_149_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln285_reg_208 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln282_fu_123_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln285_fu_163_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal h_1_reg_74 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln285_fu_157_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln265_fu_93_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln265_fu_98_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln291_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal h_fu_38 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln265_fu_104_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal d_fu_42 : STD_LOGIC_VECTOR (2 downto 0);
    signal empty_45_fu_135_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_139_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln285_1_fu_153_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln291_fu_169_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((icmp_ln282_fu_123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    d_fu_42_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln265_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                d_fu_42 <= ap_const_lv3_0;
            elsif (((icmp_ln285_fu_157_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                d_fu_42 <= add_ln282_reg_203;
            end if; 
        end if;
    end process;

    h_1_reg_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln285_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                h_1_reg_74 <= add_ln285_fu_163_p2;
            elsif (((icmp_ln282_fu_123_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                h_1_reg_74 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    h_fu_38_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                h_fu_38 <= ap_const_lv4_0;
            elsif (((icmp_ln265_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                h_fu_38 <= add_ln265_fu_104_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln282_reg_203 <= add_ln282_fu_129_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln282_fu_123_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    zext_ln285_reg_208(4 downto 1) <= zext_ln285_fu_149_p1(4 downto 1);
            end if;
        end if;
    end process;
    zext_ln285_reg_208(0) <= '0';
    zext_ln285_reg_208(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, icmp_ln282_fu_123_p2, ap_CS_fsm_state4, icmp_ln285_fu_157_p2, ap_CS_fsm_state2, icmp_ln265_fu_98_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln265_fu_98_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln282_fu_123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((icmp_ln285_fu_157_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    EncoderWeightChanges_address0 <= zext_ln291_fu_174_p1(6 - 1 downto 0);

    EncoderWeightChanges_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            EncoderWeightChanges_ce0 <= ap_const_logic_1;
        else 
            EncoderWeightChanges_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    EncoderWeightChanges_d0 <= ap_const_lv1_0;

    EncoderWeightChanges_we0_assign_proc : process(ap_CS_fsm_state4, icmp_ln285_fu_157_p2)
    begin
        if (((icmp_ln285_fu_157_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            EncoderWeightChanges_we0 <= ap_const_logic_1;
        else 
            EncoderWeightChanges_we0 <= ap_const_logic_0;
        end if; 
    end process;

    TotalErrorDeltas_address0 <= zext_ln265_fu_93_p1(6 - 1 downto 0);

    TotalErrorDeltas_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            TotalErrorDeltas_ce0 <= ap_const_logic_1;
        else 
            TotalErrorDeltas_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    TotalErrorDeltas_d0 <= ap_const_lv1_0;

    TotalErrorDeltas_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln265_fu_98_p2)
    begin
        if (((icmp_ln265_fu_98_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            TotalErrorDeltas_we0 <= ap_const_logic_1;
        else 
            TotalErrorDeltas_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln265_fu_104_p2 <= std_logic_vector(unsigned(h_fu_38) + unsigned(ap_const_lv4_1));
    add_ln282_fu_129_p2 <= std_logic_vector(unsigned(d_fu_42) + unsigned(ap_const_lv3_1));
    add_ln285_fu_163_p2 <= std_logic_vector(unsigned(h_1_reg_74) + unsigned(ap_const_lv4_1));
    add_ln291_fu_169_p2 <= std_logic_vector(unsigned(zext_ln285_reg_208) + unsigned(zext_ln285_1_fu_153_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start, ap_done_reg)
    begin
        if (((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state3_blk <= ap_const_logic_0;
    ap_ST_fsm_state4_blk <= ap_const_logic_0;

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_done_reg, ap_CS_fsm_state3, icmp_ln282_fu_123_p2)
    begin
        if (((icmp_ln282_fu_123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state3, icmp_ln282_fu_123_p2)
    begin
        if (((icmp_ln282_fu_123_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_45_fu_135_p1 <= d_fu_42(2 - 1 downto 0);
    icmp_ln265_fu_98_p2 <= "1" when (h_fu_38 = ap_const_lv4_A) else "0";
    icmp_ln282_fu_123_p2 <= "1" when (d_fu_42 = ap_const_lv3_4) else "0";
    icmp_ln285_fu_157_p2 <= "1" when (h_1_reg_74 = ap_const_lv4_A) else "0";
    tmp_1_fu_139_p4 <= ((empty_45_fu_135_p1 & empty_45_fu_135_p1) & ap_const_lv1_0);
    zext_ln265_fu_93_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_fu_38),64));
    zext_ln285_1_fu_153_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(h_1_reg_74),6));
    zext_ln285_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_139_p4),6));
    zext_ln291_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln291_fu_169_p2),64));
end behav;
